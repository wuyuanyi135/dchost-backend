'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = init;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _uberproto = require('uberproto');

var _uberproto2 = _interopRequireDefault(_uberproto);

var _feathersQueryFilters = require('feathers-query-filters');

var _feathersQueryFilters2 = _interopRequireDefault(_feathersQueryFilters);

var _feathersErrors = require('feathers-errors');

var _feathersErrors2 = _interopRequireDefault(_feathersErrors);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

if (!global._babelPolyfill) {
  require('babel-polyfill');
}

var Service = (function () {
  function Service() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Service);

    this.paginate = options.paginate || {};
    this._id = options.idField || 'id';
    this._uId = options.startId || 0;
    this.store = options.store || {};
  }

  _createClass(Service, [{
    key: 'extend',
    value: function extend(obj) {
      return _uberproto2.default.extend(obj, this);
    }
  }, {
    key: 'find',
    value: function find(params) {
      var query = params.query || {};
      var filters = (0, _feathersQueryFilters2.default)(query);

      var values = (0, _utils.filterSpecials)(_lodash2.default.values(this.store), query);

      if (!_lodash2.default.isEmpty(query)) {
        values = _lodash2.default.where(values, query);
      }

      var total = values.length;

      if (filters.$sort) {
        values.sort((0, _utils.sorter)(filters.$sort));
      }

      if (filters.$skip) {
        values = values.slice(filters.$skip);
      }

      var limit = filters.$limit || this.paginate.default;

      if (limit) {
        limit = Math.min(this.paginate.max || Number.MAX_VALUE, limit);
        values = values.slice(0, limit);
      }

      if (filters.$select) {
        values = values.map(function (value) {
          return _lodash2.default.pick(value, filters.$select);
        });
      }

      if (this.paginate.default) {
        return Promise.resolve({
          total: total,
          limit: limit,
          skip: filters.$skip || 0,
          data: values
        });
      }

      return Promise.resolve(values);
    }
  }, {
    key: 'get',
    value: function get(id) {
      if (id in this.store) {
        return Promise.resolve(this.store[id]);
      }

      return Promise.reject(new _feathersErrors2.default.NotFound('No record found for id \'' + id + '\''));
    }
  }, {
    key: 'create',
    value: function create(data) {
      var _this = this;

      if (Array.isArray(data)) {
        return Promise.all(data.map(function (current) {
          return _this.create(current);
        }));
      }

      var id = data[this._id] || this._uId++;
      var current = _lodash2.default.extend({}, data, _defineProperty({}, this._id, id));

      if (this.store[id]) {
        return Promise.reject(new _feathersErrors2.default.Conflict('A record with id: ' + id + ' already exists'));
      }

      return Promise.resolve(this.store[id] = current);
    }
  }, {
    key: 'update',
    value: function update(id, data) {
      if (id === null || Array.isArray(data)) {
        return Promise.reject(new _feathersErrors2.default.BadRequest('You can not replace multiple instances. Did you mean \'patch\'?'));
      }

      if (id in this.store) {
        data = _lodash2.default.extend({}, data, _defineProperty({}, this._id, id));
        this.store[id] = data;

        return Promise.resolve(this.store[id]);
      }

      return Promise.reject(new _feathersErrors2.default.NotFound('No record found for id \'' + id + '\''));
    }
  }, {
    key: 'patch',
    value: function patch(id, data, params) {
      var _this2 = this;

      if (id === null) {
        return this.find(params).then(function (instances) {
          return Promise.all(instances.map(function (current) {
            return _this2.patch(current[_this2._id], data, params);
          }));
        });
      }

      if (id in this.store) {
        _lodash2.default.each(data, function (value, key) {
          if (key !== _this2._id) {
            _this2.store[id][key] = value;
          }
        });

        return Promise.resolve(this.store[id]);
      }

      return Promise.reject(new _feathersErrors2.default.NotFound('No record found for id \'' + id + '\''));
    }
  }, {
    key: 'remove',
    value: function remove(id, params) {
      var _this3 = this;

      if (id === null) {
        return this.find(params).then(function (data) {
          return Promise.all(data.map(function (current) {
            return _this3.remove(current[_this3._id]);
          }));
        });
      }

      if (id in this.store) {
        var deleted = this.store[id];
        delete this.store[id];

        return Promise.resolve(deleted);
      }

      return Promise.reject(new _feathersErrors2.default.NotFound('No record found for id \'' + id + '\''));
    }
  }]);

  return Service;
})();

function init(options) {
  return new Service(options);
}

init.Service = Service;
module.exports = exports['default'];